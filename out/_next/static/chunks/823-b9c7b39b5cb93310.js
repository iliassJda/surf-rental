"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[823],{17974:(e,t,n)=>{n.d(t,{A:()=>r,m:()=>i});let a=JSON.parse('{"HV":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"boardId","type":"uint256"},{"indexed":false,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"deposit","type":"uint256"}],"name":"BoardListed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"boardId","type":"uint256"},{"indexed":false,"internalType":"address","name":"renter","type":"address"}],"name":"BoardRented","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"boardId","type":"uint256"}],"name":"BoardReturned","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"result","type":"bool"}],"name":"DepositDecision","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"who","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Withdrawal","type":"event"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"boards","outputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"address payable","name":"owner","type":"address"},{"internalType":"string","name":"description","type":"string"},{"internalType":"uint256","name":"pricePerDay","type":"uint256"},{"internalType":"uint256","name":"deposit","type":"uint256"},{"internalType":"enum SurfRental.Status","name":"available","type":"uint8"},{"internalType":"address","name":"renter","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAllBoards","outputs":[{"components":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"address payable","name":"owner","type":"address"},{"internalType":"string","name":"description","type":"string"},{"internalType":"uint256","name":"pricePerDay","type":"uint256"},{"internalType":"uint256","name":"deposit","type":"uint256"},{"internalType":"enum SurfRental.Status","name":"available","type":"uint8"},{"internalType":"address","name":"renter","type":"address"}],"internalType":"struct SurfRental.Board[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"description","type":"string"},{"internalType":"uint256","name":"pricePerDay","type":"uint256"},{"internalType":"uint256","name":"deposit","type":"uint256"}],"name":"listBoard","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"nextBoardId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"pendingWithdrawals","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"boardId","type":"uint256"}],"name":"rentBoard","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"resetBoards","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"boardId","type":"uint256"}],"name":"returnBoard","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"boardId","type":"uint256"},{"internalType":"bool","name":"boardIsOk","type":"bool"}],"name":"returnDeposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}]}'),i="0xa6e2b2711825b42F77F3Cc4e7d78C0CB4261bFB0",r=a.HV},97282:(e,t,n)=>{n.d(t,{r:()=>s,v:()=>u});var a=n(95155),i=n(12115);let r=(0,i.createContext)(void 0),u=()=>{let e=(0,i.useContext)(r);if(!e)throw Error("useWallet must be used within a WalletProvider");return e},s=e=>{let{children:t}=e,[n,u]=(0,i.useState)(!1),[s,p]=(0,i.useState)(null),[o,l]=(0,i.useState)(null),[d,y]=(0,i.useState)(!0),m=async e=>{if(void 0!==window.ethereum)try{let t=await window.ethereum.request({method:"eth_getBalance",params:[e,"latest"]});return(parseInt(t,16)/1e18).toFixed(4)}catch(e){console.error("Error getting balance: Check hardhat node is active",e)}return"0"},c=async()=>{s&&l(await m(s))},w=async()=>{if(void 0!==window.ethereum)try{let e=await window.ethereum.request({method:"eth_accounts"});if(e.length>0){u(!0),p(e[0]);let t=await m(e[0]);l(t)}}catch(e){console.error("Error checking connection:",e)}y(!1)},h=async()=>{if(void 0!==window.ethereum)try{let e=await window.ethereum.request({method:"eth_requestAccounts"});if(e.length>0){u(!0),p(e[0]);let t=await m(e[0]);l(t)}}catch(e){console.error("Error connecting wallet:",e)}};return(0,i.useEffect)(()=>{if(w(),void 0!==window.ethereum){let e=async e=>{e.length>0?(u(!0),p(e[0]),l(await m(e[0]))):(u(!1),p(null),l(null))},t=()=>{window.location.reload()};return window.ethereum.on("accountsChanged",e),window.ethereum.on("chainChanged",t),()=>{window.ethereum&&(window.ethereum.removeListener("accountsChanged",e),window.ethereum.removeListener("chainChanged",t))}}},[]),(0,a.jsx)(r.Provider,{value:{isConnected:n,account:s,balance:o,isLoading:d,connectWallet:h,disconnectWallet:()=>{u(!1),p(null),l(null)},refreshBalance:c},children:t})}}}]);