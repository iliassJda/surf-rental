/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace SurfRental {
  export type BoardStruct = {
    id: BigNumberish;
    owner: AddressLike;
    description: string;
    pricePerDay: BigNumberish;
    deposit: BigNumberish;
    available: BigNumberish;
    renter: AddressLike;
  };

  export type BoardStructOutput = [
    id: bigint,
    owner: string,
    description: string,
    pricePerDay: bigint,
    deposit: bigint,
    available: bigint,
    renter: string
  ] & {
    id: bigint;
    owner: string;
    description: string;
    pricePerDay: bigint;
    deposit: bigint;
    available: bigint;
    renter: string;
  };
}

export interface SurfRentalInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "boards"
      | "getAllBoards"
      | "listBoard"
      | "nextBoardId"
      | "pendingWithdrawals"
      | "rentBoard"
      | "resetBoards"
      | "returnBoard"
      | "returnDeposit"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BoardListed"
      | "BoardRented"
      | "BoardReturned"
      | "DepositDecision"
      | "Withdrawal"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "boards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllBoards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listBoard",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextBoardId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingWithdrawals",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rentBoard",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resetBoards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "returnBoard",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "returnDeposit",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "boards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllBoards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listBoard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextBoardId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rentBoard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resetBoards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnBoard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace BoardListedEvent {
  export type InputTuple = [
    boardId: BigNumberish,
    owner: AddressLike,
    price: BigNumberish,
    deposit: BigNumberish
  ];
  export type OutputTuple = [
    boardId: bigint,
    owner: string,
    price: bigint,
    deposit: bigint
  ];
  export interface OutputObject {
    boardId: bigint;
    owner: string;
    price: bigint;
    deposit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BoardRentedEvent {
  export type InputTuple = [boardId: BigNumberish, renter: AddressLike];
  export type OutputTuple = [boardId: bigint, renter: string];
  export interface OutputObject {
    boardId: bigint;
    renter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BoardReturnedEvent {
  export type InputTuple = [boardId: BigNumberish];
  export type OutputTuple = [boardId: bigint];
  export interface OutputObject {
    boardId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositDecisionEvent {
  export type InputTuple = [result: boolean];
  export type OutputTuple = [result: boolean];
  export interface OutputObject {
    result: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalEvent {
  export type InputTuple = [who: AddressLike, amount: BigNumberish];
  export type OutputTuple = [who: string, amount: bigint];
  export interface OutputObject {
    who: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SurfRental extends BaseContract {
  connect(runner?: ContractRunner | null): SurfRental;
  waitForDeployment(): Promise<this>;

  interface: SurfRentalInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  boards: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, bigint, string] & {
        id: bigint;
        owner: string;
        description: string;
        pricePerDay: bigint;
        deposit: bigint;
        available: bigint;
        renter: string;
      }
    ],
    "view"
  >;

  getAllBoards: TypedContractMethod<
    [],
    [SurfRental.BoardStructOutput[]],
    "view"
  >;

  listBoard: TypedContractMethod<
    [description: string, pricePerDay: BigNumberish, deposit: BigNumberish],
    [void],
    "nonpayable"
  >;

  nextBoardId: TypedContractMethod<[], [bigint], "view">;

  pendingWithdrawals: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  rentBoard: TypedContractMethod<[boardId: BigNumberish], [void], "payable">;

  resetBoards: TypedContractMethod<[], [void], "nonpayable">;

  returnBoard: TypedContractMethod<
    [boardId: BigNumberish],
    [void],
    "nonpayable"
  >;

  returnDeposit: TypedContractMethod<
    [boardId: BigNumberish, boardIsOk: boolean],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "boards"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, bigint, string] & {
        id: bigint;
        owner: string;
        description: string;
        pricePerDay: bigint;
        deposit: bigint;
        available: bigint;
        renter: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllBoards"
  ): TypedContractMethod<[], [SurfRental.BoardStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "listBoard"
  ): TypedContractMethod<
    [description: string, pricePerDay: BigNumberish, deposit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nextBoardId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pendingWithdrawals"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "rentBoard"
  ): TypedContractMethod<[boardId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "resetBoards"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "returnBoard"
  ): TypedContractMethod<[boardId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "returnDeposit"
  ): TypedContractMethod<
    [boardId: BigNumberish, boardIsOk: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "BoardListed"
  ): TypedContractEvent<
    BoardListedEvent.InputTuple,
    BoardListedEvent.OutputTuple,
    BoardListedEvent.OutputObject
  >;
  getEvent(
    key: "BoardRented"
  ): TypedContractEvent<
    BoardRentedEvent.InputTuple,
    BoardRentedEvent.OutputTuple,
    BoardRentedEvent.OutputObject
  >;
  getEvent(
    key: "BoardReturned"
  ): TypedContractEvent<
    BoardReturnedEvent.InputTuple,
    BoardReturnedEvent.OutputTuple,
    BoardReturnedEvent.OutputObject
  >;
  getEvent(
    key: "DepositDecision"
  ): TypedContractEvent<
    DepositDecisionEvent.InputTuple,
    DepositDecisionEvent.OutputTuple,
    DepositDecisionEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawal"
  ): TypedContractEvent<
    WithdrawalEvent.InputTuple,
    WithdrawalEvent.OutputTuple,
    WithdrawalEvent.OutputObject
  >;

  filters: {
    "BoardListed(uint256,address,uint256,uint256)": TypedContractEvent<
      BoardListedEvent.InputTuple,
      BoardListedEvent.OutputTuple,
      BoardListedEvent.OutputObject
    >;
    BoardListed: TypedContractEvent<
      BoardListedEvent.InputTuple,
      BoardListedEvent.OutputTuple,
      BoardListedEvent.OutputObject
    >;

    "BoardRented(uint256,address)": TypedContractEvent<
      BoardRentedEvent.InputTuple,
      BoardRentedEvent.OutputTuple,
      BoardRentedEvent.OutputObject
    >;
    BoardRented: TypedContractEvent<
      BoardRentedEvent.InputTuple,
      BoardRentedEvent.OutputTuple,
      BoardRentedEvent.OutputObject
    >;

    "BoardReturned(uint256)": TypedContractEvent<
      BoardReturnedEvent.InputTuple,
      BoardReturnedEvent.OutputTuple,
      BoardReturnedEvent.OutputObject
    >;
    BoardReturned: TypedContractEvent<
      BoardReturnedEvent.InputTuple,
      BoardReturnedEvent.OutputTuple,
      BoardReturnedEvent.OutputObject
    >;

    "DepositDecision(bool)": TypedContractEvent<
      DepositDecisionEvent.InputTuple,
      DepositDecisionEvent.OutputTuple,
      DepositDecisionEvent.OutputObject
    >;
    DepositDecision: TypedContractEvent<
      DepositDecisionEvent.InputTuple,
      DepositDecisionEvent.OutputTuple,
      DepositDecisionEvent.OutputObject
    >;

    "Withdrawal(address,uint256)": TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
    Withdrawal: TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
  };
}
